library(dplyr)
select(cleanDF, steps)
select(cleanDf, steps)
View(cleanDf)
flights %>% select(steps)
cleanDf %>% select(steps)
names(cleanDf)
cleanDf %>% group_by(interval, daytype)
%>% select(steps)
%>% summarise(mean)
cleanDf %>% group_by(interval, daytype)
%>% select(steps)
cleanDf %>% group_by(interval, daytype)
%>% select(steps)
cleanDf %>% group_by(interval, daytype) %>%
select(steps) %>%
summarise(mean)
cleanDf %>% group_by(interval, daytype) %>%
select(steps) %>%
summarise(mean())
cleanDf %>% group_by(interval, daytype) %>%
select(steps) %>%
summarise(mean(steps))
warnings()
summary <- aggregate(cleanDf$steps,
by=list(interval=cleanDf$interval,
daytype=cleanDf$daytype)
,mean)
cleanDf %>% group_by(interval, daytype) %>%
select(steps) %>%
summarise(mean(steps))
cleanDf[[1]] <- apply(df,1,filler)
daymapper <- function(x){
if(weekdays(as.Date(x[[2]], origin = origin)) %in% c("Saturday","Sunday")) "weekend"
else "weekday"
}
cleanDf$daytype <- apply(cleanDf, 1, daymapper)
cleanDf$daytype <- factor(cleanDf$daytype)
cleanDf %>% group_by(interval, daytype) %>%
select(steps) %>%
summarise(mean(steps))
summary <- aggregate(cleanDf$steps,
by=list(interval=cleanDf$interval,
daytype=cleanDf$daytype)
,mean)
head(cleanDf)
head(cleanDf,1000)
cleanDf %>% group_by(interval, daytype) %>%
select(steps) %>%
summarise(mean(steps))
warnings()
cleanDf %>% group_by(interval, daytype) %>%
select(steps)
cleanDf %>% group_by(interval, daytype) %>%
select(steps) %>%
summarise(mean(steps))
cleanDf %>% group_by(interval, daytype) %>%
select(steps) %>%
summarise(mean(steps,na.RM=TRUE))
warnings()
a= cleanDf %>% group_by(interval, daytype)
select(a,steps)
select(a,steps)%>%summarise(mean)
select(a,steps)%>%summarise(mean())
select(a,steps)%>%summarise(mean(steps))
select(a,steps)%>%summarise(mean(steps,na.RM=TRUE))
select(a,steps)%>%summarise(mean(steps,na.RM=FALSE))
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Load some libraries for later use
```{r}
library(stringr)
library(lattice)
```
## Loading and preprocessing the data
```{r}
handle <- unz("activity.zip","activity.csv")
classes <- c("integer","Date","integer")
df <- read.csv(handle, colClasses=classes)
```
## What is mean total number of steps taken per day?
```{r}
#calculate mean total number of steps per day
stepsPerDay <- sapply(split(df$steps,df$date), sum, na.rm=TRUE)
#plot
hist(stepsPerDay)
#calculate mean
mean(stepsPerDay)
#calculate median
median(stepsPerDay)
```
## What is the average daily activity pattern?
```{r}
#calculate and plot mean steps by interval across all days
stepsByInterval <- sapply(split(df$steps,df$interval), mean, na.rm=TRUE)
plot(stepsByInterval, type='l', xlab='Interval', ylab='Number of steps')
#find interval with greatest mean steps
names(which.max(stepsByInterval))
```
## Imputing missing values
```{r}
#count NA values
sum(is.na(df$steps))
#create a filler function which will
filler <- function(x){
if(is.na(x[1])){
y <- str_trim(as.character(x[3]))
as.numeric(stepsByInterval[[y]])
}
else as.numeric(x[1])
}
cleanDf <- df
View(df)
df[3]
##Results
install.packages("curl")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2","StormData.bz2")
?unz
getwd()
handle <- bzfile("StormData.bz2")
b=read.csv(handle)
raw=b
str(raw)
summary(raw)
names(raw)
head(raw)
library(plyr)
library(dplyr)
library(dplyr)
library(ggplot2)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2","StormData.bz2")
handle <- bzfile("StormData.bz2")
raw <- read.csv(handle)
valid_exps <- c("B","M","K","")
valids <- raw$PROPDMGEXP %in% valid_exps & raw$CROPDMGEXP %in% valid_exps
sum(valids) / length(raw$PROPDMGEXP)
clean <- raw[valids,]
clean <- select(clean, EVTYPE, FATALITIES, INJURIES, PROPDMG,
PROPDMGEXP, CROPDMG, CROPDMGEXP, REFNUM, REMARKS)
exponents <- data.frame(letter = c("B", "M", "K", ""),
factor = c(10^9, 10^6, 10^3, 1))
clean <- left_join(clean, rename(exponents, propfactor = factor),
by = c("PROPDMGEXP" = "letter"))
clean <- left_join(clean, rename(exponents, cropfactor = factor),
by = c("CROPDMGEXP" = "letter"))
clean <- clean %>% mutate(human_cost = FATALITIES + 0.1*INJURIES,
economic_cost = PROPDMG * propfactor +
CROPDMG * cropfactor) %>%
select(Event_type = EVTYPE,
human_cost,
economic_cost,
REFNUM,
REMARKS)
clean$economic_cost[clean$REFNUM == 605943] <- clean$economic_cost[clean$REFNUM==605943]/1000
clean$Event_type <- factor(toupper(clean$Event_type))
p <- ggplot(clean, Event_type, human_cost)
?ggplot
p <- ggplot(clean, aes(Event_type, human_cost))
p + geom_boxplot()
summarised <- clean %>% group_by(Event_type) %>%
select(Event_type, human_cost, economic_cost) %>%
summarise(avg_harm = mean(human_cost),
max_harm = max(human_cost),
avg_cost = mean(economic_cost),
max_cost = max(economic_cost))
?qplot
qplot(summarised)
qplot(summarised, Event_type, avg_harm)
qplot(summarised, x=Event_type, y=avg_harm)
str(qplot)
?qplot
str(summarised)
qplot(data=summarised, x=Event_type, y=avg_harm)
qplot(data=summarised, x=Event_type, y=max_harm)
summary(summarised$avg_harm)
summary(summarised$avg_cost)
summary(summarised$avg_harm)
summary(summarised$max_harm)
b=summarised[summarised$max_harm>0]
head(b,1)
b=summarised[summarised$max_harm>0,]
qplot(x=Event_type, y=max_harm, data=b)
a=order(summarised$max_harm)
head(a)
a=order(summarised$max_harm,descending)
a=ordered(summarised$max_harm,descending=TRUE)
?ordered
a=ordered(summarised$max_harm)
head(a)
a=order(summarised$max_harm, decreasing = TRUE)[1:10]
a
summarised[a]
summarised[a,]
top_avg_harm <- order(summarised$avg_harm, decreasing = TRUE)[1:10]
top_max_harm <- order(summarised$max_harm, decreasing = TRUE)[1:10]
top_avg_harm
top_max_harm
union(top_avg_harm, top_max_harm)
length(union(top_avg_harm, top_max_harm))
top_avg_harm <- order(summarised$avg_harm, decreasing = TRUE)[1:5]
top_max_harm <- order(summarised$max_harm, decreasing = TRUE)[1:5]
union(top_avg_harm, top_max_harm)
length(union(top_avg_harm, top_max_harm))
summary[length(union(top_avg_harm, top_max_harm)),]
summary[union(top_avg_harm, top_max_harm),]
summarised[union(top_avg_harm, top_max_harm),]
summarised[union(top_avg_harm, top_max_harm),Event_type]
summarised$Event_type[union(top_avg_harm, top_max_harm)]
harm_events <- summarised$Event_type[union(top_avg_harm, top_max_harm)]
str(harm_events)
summary(harm_events)
harm_data <- filter(clean, Event_type %in% harm_events)
str(clean)
p <- ggplot(harm_data, aes(Event_type, human_cost))
p + geom_boxplot()
p <- ggplot(harm_data, aes(Event_type, human_cost))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
p + plot()
p + geom_line()
p + stat_summary(fun.y = mean, geom = "bar")
p + stat_summary(fun.y = mean, geom = "bar") + theme(axis.text.x=element_text(angle = -90, hjust = 0))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
str(clean)
?melt
summary(harm_data)
harm_data <- clean %>% filter(Event_type %in% harm_events) %>%
select(Event_type, human_cost)
harm_data
summary(harm_data)
summary(harm_events)
summary(summarised[union(top_avg_harm, top_max_harm),])
summarised[union(top_avg_harm, top_max_harm),]
summarised[union(top_avg_harm, top_max_harm),Event_type]
summarised[[union(top_avg_harm, top_max_harm),Event_type]]
summarised[[union(top_avg_harm, top_max_harm),"Event_type"]]
summarised[union(top_avg_harm, top_max_harm),"Event_type"]
summarised[union(top_avg_harm, top_max_harm),c("Event_type","avg_harm","max_harm")]
table(summarised[union(top_avg_harm, top_max_harm),c("Event_type","avg_harm","max_harm")])
summarised[union(top_avg_harm, top_max_harm),c("Event_type","avg_harm","max_harm")]
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2","StormData.bz2", method = "curl")
?unzip
unzip("StormData.bz2")
bunzip("StormData.bz2")
library(R.Utils)
install.packages("R.Utils")
install.packages("R.utils")
library(R.utils)
bunzip("StormData.bz2")
bunzip2("StormData.bz2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2","StormData.bz2", method = "curl")
summarised[union(top_avg_cost, top_max_cost),c("Event_type","avg_cost","max_cost")]
str(summarised)
top_avg_cost <- order(summarised$avg_cost, decreasing = TRUE)[1:5]
top_max_cost <- order(summarised$max_cost, decreasing = TRUE)[1:5]
cost_events <- summarised$Event_type[union(top_avg_cost, top_max_cost)]
cost_data <- clean %>% filter(Event_type %in% cost_events)
p <- ggplot(harm_data, aes(Event_type, economic_cost))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
summarised[union(top_avg_cost, top_max_cost),c("Event_type","avg_cost","max_cost")]
p <- ggplot(cost_data, aes(Event_type, economic_cost))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
5000000000
summarised <- clean %>% group_by(Event_type) %>%
select(Event_type, human_cost, economic_cost) %>%
summarise(avg_harm = mean(human_cost),
max_harm = max(human_cost),
avg_cost = mean(economic_cost),
max_cost = max(economic_cost)
count    = n())
summarised <- clean %>% group_by(Event_type) %>%
select(Event_type, human_cost, economic_cost) %>%
summarise(avg_harm = mean(human_cost),
max_harm = max(human_cost),
avg_cost = mean(economic_cost),
max_cost = max(economic_cost),
count    = n())
summarised[union(top_avg_harm, top_max_harm),c("Event_type","avg_harm","max_harm","count")]
summarised[union(top_avg_cost, top_max_cost),c("Event_type","avg_cost","max_cost","count")]
summarised[union(top_avg_harm, top_max_harm),c("Event_type","avg_harm","max_harm","count")]
summarised <- clean %>% group_by(Event_type) %>%
select(Event_type, human_cost, economic_cost) %>%
summarise(avg_harm = mean(human_cost),
max_harm = max(human_cost),
avg_cost = mean(economic_cost),
max_cost = max(economic_cost),
count    = n()) %>%
filter(count > 5)
top_avg_harm <- order(summarised$avg_harm, decreasing = TRUE)[1:5]
top_max_harm <- order(summarised$max_harm, decreasing = TRUE)[1:5]
harm_events <- summarised$Event_type[union(top_avg_harm, top_max_harm)]
harm_data <- clean %>% filter(Event_type %in% harm_events)
p <- ggplot(harm_data, aes(Event_type, human_cost))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
summarised[union(top_avg_harm, top_max_harm),c("Event_type","avg_harm","max_harm","count")]
top_avg_cost <- order(summarised$avg_cost, decreasing = TRUE)[1:5]
top_max_cost <- order(summarised$max_cost, decreasing = TRUE)[1:5]
cost_events <- summarised$Event_type[union(top_avg_cost, top_max_cost)]
cost_data <- clean %>% filter(Event_type %in% cost_events)
p <- ggplot(cost_data, aes(Event_type, economic_cost))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
summarised[union(top_avg_cost, top_max_cost),c("Event_type","avg_cost","max_cost","count")]
summarised <- clean %>% group_by(Event_type) %>%
select(Event_type, human_cost, economic_cost) %>%
summarise(avg_harm = mean(human_cost),
max_harm = max(human_cost),
sum_harm = sum(human_cost),
avg_cost = mean(economic_cost),
max_cost = max(economic_cost),
sum_cost = sum(economic_cost),
count    = n()) %>%
filter(count > 5)
top_avg_harm <- order(summarised$avg_harm, decreasing = TRUE)[1:5]
top_max_harm <- order(summarised$max_harm, decreasing = TRUE)[1:5]
harm_events <- summarised$Event_type[union(top_avg_harm, top_max_harm)]
harm_data <- clean %>% filter(Event_type %in% harm_events)
p <- ggplot(harm_data, aes(Event_type, human_cost))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
summarised[union(top_avg_harm, top_max_harm),c("Event_type","avg_harm","max_harm","count", "sum_harm")]
?union
top_harm <- union(top_avg_harm, top_max_harm, top_sum_harm)
top_avg_harm <- order(summarised$avg_harm, decreasing = TRUE)[1:5]
top_max_harm <- order(summarised$max_harm, decreasing = TRUE)[1:5]
top_sum_harm <- order(summarised$sum_harm, decreasing = TRUE)[1:5]
top_harm <- union(top_avg_harm, top_max_harm, top_sum_harm)
top_harm <- union(union(top_avg_harm, top_max_harm), top_sum_harm)
harm_events <- summarised$Event_type[top_harm]
harm_data <- clean %>% filter(Event_type %in% harm_events)
p <- ggplot(harm_data, aes(Event_type, human_cost))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
summarised[union(top_avg_harm, top_max_harm),c("Event_type","avg_harm","max_harm","count", "sum_harm")]
top_avg_cost <- order(summarised$avg_cost, decreasing = TRUE)[1:5]
top_max_cost <- order(summarised$max_cost, decreasing = TRUE)[1:5]
cost_events <- summarised$Event_type[union(top_avg_cost, top_max_cost)]
cost_data <- clean %>% filter(Event_type %in% cost_events)
p <- ggplot(cost_data, aes(Event_type, economic_cost))
p + geom_boxplot() + theme(axis.text.x=element_text(angle = -90, hjust = 0))
summarised[union(top_avg_cost, top_max_cost),c("Event_type","avg_cost","max_cost","count", "sum_cost")]
?library
options(rpubs.upload.method = "internal")
.Renviron
.REnviron
version()
dir()
setwd("GitRepo")
dir()
library(devtools)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='rutulian', token='0B522E50513E8B7F4216E7A49FA9FD64', secret='XVYGla2U4EXygGPQ8UlEEv57Bs9yjxKMzuldqkWP')
library(shinyapps)
getwd()
dir()
shinyapps::deployApp("GaltonShiny")
12.3 %% 1
?text
?span
runApp("GaltonShiny")
library(shiny)
runApp("GaltonShiny")
runApp("GaltonShiny")
runApp("GaltonShiny")
runApp("GaltonShiny")
?galton
runApp("GaltonShiny")
runApp("GaltonShiny")
?div
runApp("GaltonShiny")
shiny::runApp('GaltonShiny')
shiny::runApp('GaltonShiny')
?footer
shiny::runApp('GaltonShiny')
?footer
library(shiny)
?footer
shiny::runApp('GaltonShiny')
shinyapps::deployApp("GaltonShiny")
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidifyLibraries')
library(slidify)
getwd()
dir()
mkdir("GaltonSlidify")
dir.create("GaltonSlidify")
dir()
setwd("GaltonSlidify")
author("GaltonSlidify")
dir()
slidify("index.Rmd")
dir()
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
?galton
head(galton)
?xtab
?xtable
?xtable(head(galton))
xtable(head(galton))
library(UsingR)
library(xtable)
xtable(head(galton))
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
?xtable
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
lm(galton)
a=lm(galton)
summary(a)
slidify("index.Rmd")
summary(a)
browseURL("index.html")
summary(lm(galton))$Coefficients
lm(galton)$Coefficients
a
lm(galton)$coefficients
slidify("index.Rmd")
browseURL("index.html")
summary(lm(galton))$coefficients
summary(lm(galton))
summary(lm(galton))$[c(2,3,6)]
summary(lm(galton))[c(2,3,6)]
summary(lm(galton))[c(6)]
summary(lm(galton))[c(2,6)]
summary(lm(galton))[c(1,6)]
summary(lm(galton))[c(3,6)]
summary(lm(galton))[c(4,6)]
summary(lm(galton))
summary(lm(galton))[c(4,6)]
summary(lm(galton))[c(6,7)]
summary(lm(galton))[c(6,8)]
length(galton)
length(galton[1])
length(galton[[1]])
length(galton,2)
length(galton,1)
dim(galton)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(title='GaltonSlidify','index.html',host='rpubs')
publish(user = "rutulian", repo = "GaltonSlidify")
slidify("index.Rmd")
